clickToAddress.prototype.search = function(searchText, filters, timeTrack) {
    var that = this;
    if (searchText == "") {
        return;
    }
    if (typeof filters == "undefined") {
        filters = {};
    }
    this.setProgressBar(0);
    var parameters = {
        key: this.key,
        query: searchText,
        filters: filters,
        country: this.activeCountry,
        fingerprint: this.fingerprint,
        integration: this.tag
    };
    if (typeof this.accessTokenOverride[this.activeCountry] != "undefined") {
        parameters.key = this.accessTokenOverride[this.activeCountry];
    }
    if (this.coords != {}) {
        parameters.coords = {};
        parameters.coords.lat = this.coords.latitude;
        parameters.coords.lng = this.coords.longitude;
    }
    try {
        var data = this.cacheRetrieve(parameters);
        that.hideErrors();
        that.searchResults = data;
        that.showResults();
        if (!that.focused) {
            that.activeInput.focus();
        }
        that.setProgressBar(1);
        return;
    } catch (err) {
        if ([ "cc/cr/01", "cc/cr/02" ].indexOf(err) == -1) {
            throw err;
        }
    }
    var url = this.baseURL + "find";
    request = new XMLHttpRequest();
    request.open("POST", url, true);
    request.setRequestHeader("Content-Type", "application/json");
    request.setRequestHeader("Accept", "application/json");
    var that = this;
    request.onreadystatechange = function() {
        if (this.readyState === 4 && (that.sidCheck(timeTrack) || typeof timeTrack == "undefined")) {
            that.setProgressBar(1);
            that.clear();
            if (this.status >= 200 && this.status < 400) {
                if (this.status == 204) {
                    return;
                }
                var data = "";
                try {
                    data = JSON.parse(this.responseText);
                    that.hideErrors();
                    that.searchResults = data;
                    that.showResults();
                    if (!that.focused) {
                        that.activeInput.focus();
                    }
                    that.cacheStore(parameters, data);
                } catch (err) {
                    that.error(9011, "JS Client side error.");
                }
            } else {
                var data = {};
                try {
                    data = JSON.parse(this.responseText);
                } catch (e) {
                    data = {};
                }
                if (typeof data.error_code == "string") {
                    that.error(data.error_code, data.error_msg);
                } else {
                    that.error(9010, this.status + " / Unknown Server Error.");
                }
            }
        }
    };
    request.send(JSON.stringify(parameters));
    request = null;
};

clickToAddress.prototype.getAddressDetails = function(id) {
    var parameters = {
        id: id,
        country: this.activeCountry,
        key: this.key,
        fingerprint: this.fingerprint,
        integration: this.tag
    };
    if (typeof this.accessTokenOverride[this.activeCountry] != "undefined") {
        parameters.key = this.accessTokenOverride[this.activeCountry];
    }
    if (this.coords != {}) {
        parameters.coords = this.coords;
    }
    var url = this.baseURL + "retrieve";
    request = new XMLHttpRequest();
    request.open("POST", url, true);
    request.setRequestHeader("Content-Type", "application/json");
    request.setRequestHeader("Accept", "application/json");
    var that = this;
    request.onreadystatechange = function() {
        if (this.readyState === 4) {
            if (this.status >= 200 && this.status < 400) {
                try {
                    that.fillData(JSON.parse(this.responseText));
                    that.hideErrors();
                    that.cleanHistory();
                } catch (e) {
                    that.error(9011, "JS Client side error.");
                }
            } else {
                var data = {};
                try {
                    data = JSON.parse(this.responseText);
                } catch (e) {
                    data = {};
                }
                if (typeof data.error_code == "string") {
                    that.error(data.error_code, data.error_msg);
                } else {
                    that.error(9010, this.status + " / Unknown Server Error.");
                }
            }
        }
    };
    request.send(JSON.stringify(parameters));
    request = null;
};

clickToAddress.prototype.getAvailableCountries = function(success_function) {
    var parameters = {
        key: this.key,
        fingerprint: this.fingerprint,
        integration: this.tag
    };
    var url = this.baseURL + "countries";
    request = new XMLHttpRequest();
    request.open("POST", url, true);
    request.setRequestHeader("Content-Type", "application/json");
    request.setRequestHeader("Accept", "application/json");
    var that = this;
    request.onreadystatechange = function() {
        if (this.readyState === 4) {
            if (this.status == 401) {
                return;
            }
            if (this.status >= 200 && this.status < 400) {
                try {
                    that.serviceReady = true;
                    var respJson = JSON.parse(this.responseText);
                    that.validCountries = respJson.countries;
                    that.ipLocation = respJson.ip_location;
                    that.hideErrors();
                    success_function();
                } catch (e) {
                    that.error(9011, "JS Client side error.");
                }
            } else {
                var data = {};
                try {
                    data = JSON.parse(this.responseText);
                } catch (e) {
                    data = {};
                }
                if (typeof data.error_code == "string") {
                    that.error(data.error_code, data.error_msg);
                } else {
                    that.error(9010, this.status + " / Unknown Server Error.");
                }
            }
        }
    };
    request.send(JSON.stringify(parameters));
    var xmlHttpTimeout = setTimeout(function() {
        if (request != null && request.readyState !== 4) {
            request.abort();
            that.error(9012, "Server Unavailable. (timeout)");
        }
    }, 1e4);
};

clickToAddress.prototype.cacheRetrieve = function(search) {
    if (typeof this.cache[search.country] == "undefined") {
        throw "cc/cr/01";
    }
    for (var i = 0; i < this.cache[search.country].length; i++) {
        if (this.cache[search.country][i].query == search.query && JSON.stringify(this.cache[search.country][i].filters) == JSON.stringify(search.filters)) {
            return this.cache[search.country][i].response;
        }
    }
    throw "cc/cr/02";
};

clickToAddress.prototype.cacheStore = function(search, obj) {
    if (typeof this.cache[search.country] == "undefined") {
        this.cache[search.country] = [];
    }
    this.cache[search.country].push({
        query: search.query,
        filters: search.filters,
        response: obj
    });
    if (this.cache[search.country].length > 100) {
        this.cache[search.country].shift();
    }
    this.setHistoryStep();
};

clickToAddress.prototype.history = function(dir) {
    if (!this.historyTools) return;
    if (this.cachePos == -1) {
        this.cachePos = 0;
    }
    var searchParams = {};
    var cacheLength = Object.keys(this.cache[this.activeCountry]).length - 1;
    if (dir == 0) {
        this.cachePos++;
        searchParams = this.cache[this.activeCountry][cacheLength - this.cachePos];
    } else {
        this.cachePos--;
        searchParams = this.cache[this.activeCountry][cacheLength - this.cachePos];
    }
    this.setHistoryStep();
    this.activeInput.value = searchParams.query;
    this.search(searchParams.query, searchParams.filters);
};

clickToAddress.prototype.setHistoryActions = function() {
    if (!this.historyTools) return;
    var that = this;
    var backBtn = this.searchObj.getElementsByClassName("back")[0];
    var forwardBtn = this.searchObj.getElementsByClassName("forward")[0];
    ccEvent(backBtn, "click", function() {
        if (backBtn.className == "back") {
            for (var i = 0; i < that.cache[that.activeCountry].length; i++) {
                console.log(that.cache[that.activeCountry][i].query);
            }
            that.history(0);
        }
    });
    ccEvent(forwardBtn, "click", function() {
        if (forwardBtn.className == "forward") {
            that.history(1);
        }
    });
};

clickToAddress.prototype.setHistoryStep = function() {
    if (!this.historyTools) return;
    var backBtn = this.searchObj.getElementsByClassName("back")[0];
    var forwardBtn = this.searchObj.getElementsByClassName("forward")[0];
    backBtn.className = "back";
    forwardBtn.className = "forward";
    if (typeof this.cache[this.activeCountry] == "undefined" || this.cachePos == Object.keys(this.cache[this.activeCountry]).length - 1 || Object.keys(this.cache[this.activeCountry]).length <= 1) {
        backBtn.className = "back disabled";
    }
    if (typeof this.cache[this.activeCountry] == "undefined" || this.cachePos <= 0 || Object.keys(this.cache[this.activeCountry]).length <= 1) {
        forwardBtn.className = "forward disabled";
    }
};

clickToAddress.prototype.cleanHistory = function() {
    if (this.cachePos == -1) {
        return;
    }
    var cacheLength = Object.keys(this.cache[this.activeCountry]).length - 1;
    var removeAt = cacheLength - this.cachePos;
    this.cache[this.activeCountry].splice(removeAt, this.cachePos);
    this.cachePos = -1;
    this.setHistoryStep();
};

clickToAddress.prototype.info = function(state) {
    var infoBar = this.searchObj.getElementsByClassName("infoBar")[0];
    switch (state) {
      case "pre-trial":
        infoBar.className += " infoActive";
        infoBar.innerHTML = "<h5>Get a trial account today!</h5><p>You can test the functionality by using our test addresses.</p>";
        break;
    }
};

clickToAddress.prototype.setFingerPrint = function() {
    var low = 1e15;
    var high = 1e16;
    var value = Math.floor(Math.random() * (high - low + 1) + low);
    this.fingerprint = value.toString(16);
};

clickToAddress.prototype.getFingerPrint = function() {
    return this.fingerprint;
};

function ccEvent(target, event_to_react, function_to_call) {
    target.addEventListener(event_to_react, function_to_call);
}

function clickToAddress(config) {
    if (document.getElementById("cc_c2a") != null) {
        throw "Already initiated";
    }
    var that = this;
    this.preset(config);
    this.gfxModeTools = c2a_gfx_modes["mode" + this.gfxMode];
    this.gfxModeTools.addHtml(this);
    this.searchObj = document.getElementById("cc_c2a");
    this.resultList = this.searchObj.getElementsByClassName("c2a_results")[0];
    this.errorObj = this.searchObj.getElementsByClassName("c2a_error")[0];
    this.getAvailableCountries(function() {
        that.serviceReady = true;
        that.setCountryChange();
        if (that.getIpLocation && that.ipLocation != "") {
            var country = that.ipLocation;
        } else {
            var country = that.defaultCountry;
        }
        that.selectCountry(country);
    });
    if (this.searchObj.getElementsByClassName("history").length) {
        this.setHistoryActions();
    }
    ccEvent(this.searchObj, "mouseover", function() {
        that.hover = true;
    });
    ccEvent(this.searchObj, "mouseout", function() {
        that.hover = false;
    });
    ccEvent(document, "click", function() {
        that.hide();
    });
    ccEvent(document, "scroll", function() {
        if (that.visible && that.focused) {
            setTimeout(function() {
                that.gfxModeTools.reposition(that, that.activeInput);
            }, 100);
            that.hideKeyboard();
        }
    });
    ccEvent(window, "resize", function() {
        if (that.visible) {
            setTimeout(function() {
                that.gfxModeTools.reposition(that, that.activeInput);
            }, 100);
        }
    });
    this.getStyleSheet();
    if (this.key == "xxxxx-xxxxx-xxxxx-xxxxx") {
        this.info("pre-trial");
    }
    if (typeof config.dom != "undefined") {
        this.attach(config.dom);
    }
}

clickToAddress.prototype.fillData = function(addressData) {
    if (typeof this.activeDom.country != "undefined") {
        var options = this.activeDom.country.getElementsByTagName("option");
        if (options.length) {
            var target_val = "";
            for (var i = 0; i < options.length && target_val == ""; i++) {
                switch (this.countryMatchWith) {
                  case "iso_2":
                    break;
                }
                if (options[i].innerHTML == this.validCountries[this.activeCountryId].country_name) {
                    target_val = options[i].value;
                    break;
                }
                if (options[i].value == this.activeCountry) {
                    target_val = options[i].value;
                    break;
                }
            }
            this.activeDom.country.value = target_val;
        } else {
            this.activeDom.country.value = this.validCountries[this.activeCountryId].country_name;
        }
    }
    if (typeof this.activeDom.line_1 != "undefined") {
        this.activeDom.line_1.value = addressData.result.line_1;
        if (typeof this.activeDom.line_2 != "undefined") {
            this.activeDom.line_2.value = addressData.result.line_2;
        } else {
            if (addressData.result.line_2 != "") {
                line_3.push(addressData.result.line_2);
            }
        }
        if (typeof this.activeDom.company != "undefined") {
            this.activeDom.company.value = addressData.result.company_name;
        } else {
            if (addressData.result.company_name != "") {
                this.activeDom.line_1.value = addressData.result.company_name + ", " + this.activeDom.line_1.value;
            }
        }
        var line_3 = [];
        if (typeof this.activeDom.postcode != "undefined") {
            this.activeDom.postcode.value = addressData.result.postal_code;
        } else {
            line_3.push(addressData.result.postal_code);
        }
        if (typeof this.activeDom.town != "undefined") {
            if (addressData.result.locality != "") {
                this.activeDom.town.value = addressData.result.locality;
            } else {
                this.activeDom.town.value = addressData.result.dependent_locality;
            }
        } else {
            if (addressData.result.locality != "") {
                line_3.push(addressData.result.locality);
            } else {
                line_3.push(addressData.result.dependent_locality);
            }
        }
        if (addressData.result.province != "") {
            var province_set = {
                province: addressData.result.province,
                code: addressData.result.province_code,
                name: addressData.result.province_name
            };
            if (typeof this.onSetCounty == "function") {
                this.onSetCounty(this, province_set, this.activeDom.county);
            } else if (typeof this.activeDom.county != "undefined") {
                this.setCounty(province_set);
            }
        }
        if (line_3.length) {
            if (typeof this.activeDom.line_2 != "undefined") {
                this.activeDom.line_2.value += ", " + line_3.join(", ");
            } else {
                this.activeDom.line_1.value += ", " + line_3.join(", ");
            }
        }
    }
    if (typeof this.onResultSelected == "function") {
        this.onResultSelected(this, this.activeDom, addressData.result);
    }
    this.hide(true);
};

clickToAddress.prototype.setCounty = function(element, province) {
    var options = element.getElementsByTagName("option");
    if (options.length) {
        var target_val = province.code;
        for (var i = 0; i < options.length; i++) {
            if (options[i].innerHTML == province.name) {
                target_val = options[i].value;
                break;
            }
        }
        element.value = target_val;
    } else {
        element.value = province.name;
    }
};

clickToAddress.prototype.showResults = function(full) {
    this.resetSelector();
    var newHtml = "";
    var limit = this.searchResults.results.length;
    for (var i = 0; i < limit; i++) {
        newHtml += "<li></li>";
    }
    this.resultList.innerHTML = newHtml;
    var listElements = this.resultList.getElementsByTagName("li");
    this.resultList.scrollTop = 0;
    var that = this;
    for (var i = 0; i < listElements.length; i++) {
        var row = this.searchResults.results[i];
        var content = "<div>";
        if (typeof row.labels[0] == "string" && row.labels[0] !== "") content += "<span>" + row.labels[0] + "</span>";
        if (typeof row.labels[1] == "string" && row.labels[1] !== "") content += '<span class="light">' + row.labels[1] + "</span>";
        if (typeof row.count == "number" && row.count > 1) content += '<span class="light">(' + row.count + " more)</span>";
        content += "</div>";
        listElements[i].innerHTML = content;
        listElements[i].setAttribute("title", row.labels.join(", "));
        if (typeof row.count == "number" && row.count > 1) {
            listElements[i].className = "filter";
            listElements[i].innerHTML += '<i class="craftyicons-caret"></i>';
        }
        if (typeof row.id == "number") listElements[i].key = row.id; else listElements[i].key = 0;
        if (typeof row.filters != "undefined") listElements[i].filters = row.filters; else listElements[i].filters = null;
        if (typeof row.query != "undefined") listElements[i].query = row.query; else listElements[i].query = null;
        ccEvent(listElements[i], "click", function() {
            that.select(this);
        });
    }
    if (this.searchResults.results.length === 0) {
        this.resultList.innerHTML = '<li class="deadend">' + this.texts.no_results + "</li>";
        this.hasContent = false;
    } else {
        this.hasContent = true;
    }
};

clickToAddress.prototype.select = function(li) {
    this.resetSelector();
    this.cleanHistory();
    if (li.key !== 0) {
        this.getAddressDetails(li.key);
        this.hide();
        this.loseFocus();
        return;
    }
    if (li.filters !== null || li.query !== null) {
        this.search(this.activeInput.value, li.filters);
        this.getFocus();
        if (li.query !== null) {
            this.activeInput.value = li.query;
        }
        this.activeFilters = li.filters;
        return;
    }
    if (li.className != "deadend") {
        this.search(this.activeInput.value);
        this.getFocus();
        return;
    }
};

clickToAddress.prototype.getGeo = function() {
    var that = this;
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            that.coords = position.coords;
            that.showGeo();
        });
    }
};

clickToAddress.prototype.changeCountry = function(filter) {
    this.resetSelector();
    var newHtml = "";
    var limit = this.validCountries.length;
    for (var i = 0; i < limit; i++) {
        newHtml += "<li></li>";
    }
    this.resultList.innerHTML = newHtml;
    var listElements = this.resultList.getElementsByTagName("li");
    this.resultList.scrollTop = 0;
    var that = this;
    var skip = 0;
    for (var i = 0; i < listElements.length; i++) {
        var row = this.validCountries[i + skip];
        var content = "";
        if (typeof filter !== "undefined") {
            if (row.country_name.toLowerCase().indexOf(filter.toLowerCase()) != -1) {
                content = '<span class="flag flag-' + row.short_code + '"></span>' + "<span>" + row.country_name + "</span>";
            } else {
                listElements[i].parentNode.removeChild(listElements[i]);
                i--;
                skip++;
            }
        } else {
            var content = '<span class="flag flag-' + row.short_code + '"></span>' + "<span>" + row.country_name + "</span>";
        }
        if (content != "") {
            listElements[i].innerHTML = content;
            listElements[i].setAttribute("countryCode", row.code);
            that.hasContent = true;
            ccEvent(listElements[i], "click", function() {
                that.selectCountry(this.getAttribute("countryCode"));
            });
        }
    }
    this.sid = -1;
    this.getFocus();
};

clickToAddress.prototype.selectCountry = function(countryCode) {
    var that = this;
    this.clear();
    var countryObj = this.searchObj.getElementsByClassName("country_img")[0];
    var selectedCountry = {};
    this.activeCountryId = 0;
    for (var i = 0; i < this.validCountries.length; i++) {
        if (this.validCountries[i].code == countryCode) {
            selectedCountry = this.validCountries[i];
            this.activeCountryId = i;
            break;
        }
    }
    countryObj.setAttribute("class", "country_img flag flag-" + selectedCountry.short_code);
    this.activeCountry = countryCode;
    this.sid = 0;
    this.getFocus();
    if (typeof this.activeInput.value != "undefined" && typeof this.lastSearch != "undefined") {
        this.activeInput.value = this.lastSearch;
        this.activeFilters = {};
        this.lastSearch = this.value;
        var timeTrack = new Date().getTime() / 1e3;
        this.sid = timeTrack;
        setTimeout(function() {
            if (that.sidCheck(timeTrack)) {
                if (that.activeInput.value !== "") {
                    that.search(that.activeInput.value, that.activeFilters, timeTrack);
                    that.cleanHistory();
                } else {
                    that.clear();
                }
            }
        }, 500);
        this.gfxModeTools.reposition(this, this.activeInput);
    }
    this.setPlaceholder(0);
};

clickToAddress.prototype.setCountryChange = function() {
    if (this.enabledCountries.length !== 0) {
        for (var i = 0; i < this.validCountries.length; i++) {
            var row = this.validCountries[i];
            if (this.enabledCountries.indexOf(row.code) == -1) {
                this.validCountries.splice(i, 1);
                i--;
            }
        }
    }
    var countryObj = this.searchObj.getElementsByClassName("country_btn")[0];
    var that = this;
    ccEvent(countryObj, "click", function() {
        if (that.sid != -1) {
            that.setPlaceholder(1);
            that.changeCountry();
            that.activeInput.value = "";
            that.hasContent = true;
        } else {
            that.setPlaceholder(0);
            that.sid = 0;
            that.hide(true);
            that.getFocus();
            that.hover = true;
        }
    });
};

clickToAddress.prototype.sidCheck = function(sid) {
    return sid == this.sid;
};

clickToAddress.prototype.destroy = function() {};

if (typeof c2a_gfx_modes == "undefined") {
    var c2a_gfx_modes = {};
}

c2a_gfx_modes["mode1"] = {
    addHtml: function(that) {
        var cc_dropdown = document.createElement("DIV");
        cc_dropdown.className = "c2a_mode" + that.gfxMode + " c2a_" + that.style.ambient + " c2a_accent_" + that.style.accent;
        cc_dropdown.id = "cc_c2a";
        var countrySelect = '<div class="country"><div class="country_btn"><div class="country_img"></div><span>' + that.texts.country_button + "</span></div></div>";
        var progressBar = '<div class="progressBar"></div>';
        var infoBar = '<div class="infoBar"></div>';
        var historyBar = '<div class="history"><div class="back disabled"><i class="craftyicons-fw2 craftyicons-flip"></i></div>';
        historyBar += '<div class="forward disabled"><i class="craftyicons-fw2"></i></div></div>';
        var footerHtml = progressBar + countrySelect + infoBar;
        if (that.historyTools === true) {
            footerHtml += historyBar;
        }
        var footerClass = "c2a_footer", title = "";
        var html = '<div class="c2a_error"></div><ul class="c2a_results"></ul>' + '<div class="' + footerClass + '"' + title + ">" + footerHtml + "</div>";
        cc_dropdown.innerHTML = html;
        document.body.appendChild(cc_dropdown);
    },
    reposition: function(that, target) {
        var elemRect = target.getBoundingClientRect(), bodyRect = document.body.getBoundingClientRect(), topOffset = elemRect.top - bodyRect.top + target.offsetHeight - 3;
        leftOffset = elemRect.left - bodyRect.left;
        if (document.body.style.paddingLeft != "") {
            leftOffset += parseInt(document.body.style.paddingLeft);
        }
        var htmlTop = parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("margin-top"));
        htmlTop += parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("padding-top"));
        topOffset += htmlTop;
        if (bodyRect.bottom < that.searchObj.offsetHeight) {
            topOffset -= target.offsetHeight + that.searchObj.offsetHeight;
        }
        that.searchObj.style.left = leftOffset + 3 + "px";
        that.searchObj.style.top = topOffset + "px";
        that.searchObj.style.width = target.offsetWidth - 6 + "px";
    }
};

if (typeof c2a_gfx_modes == "undefined") {
    var c2a_gfx_modes = {};
}

c2a_gfx_modes["mode2"] = {
    addHtml: function(that) {
        var cc_dropdown = document.createElement("DIV");
        cc_dropdown.className = "c2a_mode" + that.gfxMode + " c2a_" + that.style.ambient + " c2a_accent_" + that.style.accent;
        cc_dropdown.id = "cc_c2a";
        var topbar = '<div class="country">';
        topbar += '<div class="country_btn"><div class="country_img"></div><span>' + that.texts.country_button + "</span></div>";
        if (that.historyTools === true) {
            topbar += '<div class="history"><div class="back disabled"><i class="craftyicons-fw2 craftyicons-flip"></i></div>';
            topbar += '<div class="forward disabled"><i class="craftyicons-fw2"></i></div></div>';
        }
        topbar += "</div>";
        var progressBar = '<div class="progressBar"></div>';
        var infoBar = '<div class="infoBar"></div>';
        var footerClass = "c2a_footer", title = "";
        var footerHtml = progressBar + infoBar;
        if (that.showLogo) {
            footerHtml += '<div class="c2a_logo"></div>';
            title = ' title="Provided by Crafty Clicks"';
        }
        if (!that.showLogo && !that.geocode) {
            footerClass += " c2a_footer_min";
        }
        var html = topbar + '<div class="c2a_error"></div><ul class="c2a_results"></ul>' + '<div class="' + footerClass + '"' + title + ">" + footerHtml + "</div>";
        cc_dropdown.innerHTML = html;
        document.body.appendChild(cc_dropdown);
    },
    reposition: function(that, target) {
        var topElemHeight = 22;
        var elemRect = target.getBoundingClientRect(), bodyRect = document.body.getBoundingClientRect(), topOffset = elemRect.top - bodyRect.top - (topElemHeight + 10);
        leftOffset = elemRect.left - bodyRect.left + document.body.style.paddingLeft;
        var htmlTop = parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("margin-top"));
        htmlTop += parseInt(window.getComputedStyle(document.getElementsByTagName("html")[0]).getPropertyValue("padding-top"));
        topOffset += htmlTop;
        that.searchObj.style.left = leftOffset - 5 + "px";
        that.searchObj.style.top = topOffset + "px";
        that.searchObj.style.width = target.offsetWidth + 10 + "px";
        that.searchObj.getElementsByClassName("country")[0].style.marginBottom = target.offsetHeight + 10 + "px";
        var activeClass = "c2a_active";
        var activeElements = document.getElementsByClassName(activeClass);
        for (var i = 0; i < activeElements.length; i++) {
            activeElements[i].className = activeElements[i].className.replace(" " + activeClass, "");
        }
        target.className += " " + activeClass;
    }
};

clickToAddress.prototype.preset = function(config) {
    this.serviceReady = false;
    this.activeCountry = "";
    this.hover = false;
    this.visible = false;
    this.focused = false;
    this.hasContent = false;
    this.keyboardHideInProgress = false;
    this.coords = 0;
    this.activeDom = {};
    this.domLib = [];
    this.searchResults = {};
    this.searchObj = {};
    this.selectorPos = -1;
    this.activeInput = "init";
    this.sid = 0;
    this.cache = {};
    this.cachePos = -1;
    this.activeFilters = {};
    this.lastSearch = "";
    this.funcStore = {};
    this.setCfg(config, "gfxMode", 1);
    this.setCfg(config, "baseURL", "https://api.craftyclicks.co.uk/address/1.0", "relay");
    if (this.baseURL[this.baseURL.length] != "/") {
        this.baseURL += "/";
    }
    this.setCfg(config, "key", "xxxxx-xxxxx-xxxxx-xxxxx", "accessToken");
    this.setCfg(config, "defaultCountry", "gbr");
    this.setCfg(config, "enabledCountries", []);
    this.setCfg(config, "style", {
        ambient: "light",
        accent: "default"
    });
    this.setCfg(config, "domMode", "name");
    this.setCfg(config, "placeholders", true);
    this.setCfg(config, "onResultSelected");
    this.setCfg(config, "onCountryChange");
    this.setCfg(config, "onSetCounty");
    this.setCfg(config, "onError");
    this.setCfg(config, "showLogo", true);
    this.setCfg(config, "historyTools", true);
    this.setCfg(config, "getIpLocation", true);
    this.setCfg(config, "accessTokenOverride", {});
    this.setupText(config.texts);
    this.setCfg(config, "countryMatchWith", "iso_2");
    this.setCfg(config, "tag", "");
    this.setCfg(config, "cssPath", "cc_c2a.min.css");
    this.setFingerPrint();
};

cc_debug = false;

clickToAddress.prototype.setupText = function(textCfg) {
    this.texts = {
        default_placeholder: "Start with post/zip code or street",
        country_placeholder: "Type here to search for a country",
        country_button: "Change Country",
        generic_error: "An error occured. Please enter your address manually",
        no_results: "No results found"
    };
    if (typeof textCfg != "undefined") {
        var keys = Object.keys(this.texts);
        for (var i = 0; i < keys.length; i++) {
            if (typeof textCfg[keys[i]] != "undefined") {
                this.texts[keys[i]] = textCfg[keys[i]];
            }
        }
    }
};

clickToAddress.prototype.setCfg = function(config, name, defaultValue, cfgValue) {
    if (typeof cfgValue == "undefined") {
        cfgValue = name;
    }
    if (typeof config[cfgValue] != "undefined" && config[cfgValue] !== "") {
        this[name] = config[cfgValue];
    } else {
        this[name] = defaultValue;
    }
};

clickToAddress.prototype.setPlaceholder = function(country, target) {
    if (this.activeInput != "init") {
        target = this.activeInput;
    }
    if (this.placeholders && typeof target != "undefined") {
        var text = this.texts.default_placeholder;
        if (country) {
            text = this.texts.country_placeholder;
        }
        target.setAttribute("placeholder", text);
    }
};

clickToAddress.prototype.error = function(code, message) {
    if (cc_debug) {
        console.warn("CraftyClicks Debug Error Message: [" + code + "] " + message);
    }
    this.errorObj.innerHTML = this.texts.generic_error;
    this.errorObj.className = "c2a_error";
    if (typeof this.onError != "undefined") {
        this.onError(code);
    }
};

clickToAddress.prototype.hideErrors = function() {
    this.errorObj.innerHTML = "";
    this.errorObj.className = "c2a_error c2a_error_hidden";
};

clickToAddress.prototype.getFocus = function() {
    if (this.activeInput != "init") this.activeInput.focus();
    this.focused = true;
};

clickToAddress.prototype.loseFocus = function() {
    if (this.activeInput != "init") this.activeInput.blur();
    this.focused = false;
};

clickToAddress.prototype.clear = function() {
    this.resultList.innerHTML = "";
    this.sid = 0;
};

clickToAddress.prototype.show = function() {
    this.searchObj.style.display = "block";
    this.visible = true;
};

clickToAddress.prototype.hide = function(force_it) {
    if (this.keyboardHideInProgress) {
        this.keyboardHideInProgress = false;
        return;
    }
    if (force_it || this.visible && !this.focused && !this.hover) {
        this.searchObj.style.display = "none";
        this.visible = false;
        this.hover = false;
        this.clear();
        this.resetSelector();
        this.setPlaceholder(0);
    }
    this.hideErrors();
};

clickToAddress.prototype.attach = function(dom) {
    var domElements = {};
    var objectArray = [ "search", "postcode", "town", "line_1", "line_2", "company", "county", "county_list", "country" ];
    switch (this.domMode) {
      case "id":
        var quickGet = function(dom, obj_name) {
            if (typeof dom[obj_name] == "string" && dom[obj_name] !== "") {
                return document.getElementById(dom[obj_name]);
            }
        };
        for (var i = 0; i < objectArray.length; i++) {
            domElements[objectArray[i]] = quickGet(dom, objectArray[i]);
        }
        break;

      case "class":
        var quickGet = function(dom, obj_name) {
            if (typeof dom[obj_name] == "string" && dom[obj_name] !== "") {
                return document.getElementsByClassName(dom[obj_name])[0];
            }
        };
        for (var i = 0; i < objectArray.length; i++) {
            domElements[objectArray[i]] = quickGet(dom, objectArray[i]);
        }
        break;

      case "name":
        var quickGet = function(dom, obj_name) {
            if (typeof dom[obj_name] == "string" && dom[obj_name] !== "") {
                return document.getElementsByName(dom[obj_name])[0];
            }
        };
        for (var i = 0; i < objectArray.length; i++) {
            domElements[objectArray[i]] = quickGet(dom, objectArray[i]);
        }
        break;

      case "object":
        var quickGet = function(dom, obj_name) {
            if (typeof dom[obj_name] == "object" && dom[obj_name] !== "") {
                return dom[obj_name];
            }
        };
        for (var i = 0; i < objectArray.length; i++) {
            domElements[objectArray[i]] = quickGet(dom, objectArray[i]);
        }
        break;
    }
    var target = domElements.search;
    if (target.getAttribute("cc_applied") == "true") {
        throw "ClickToAddress already applied to this element!";
    }
    target.setAttribute("cc_applied", "true");
    target.setAttribute("autocomplete", "off");
    this.setPlaceholder(0, target);
    var domLibId = this.domLib.length;
    this.domLib.push(domElements);
    var that = this;
    ccEvent(target, "keydown", function(e) {
        if (!that.serviceReady) return;
        if (e.keyCode == 38 || e.keyCode == 40) {
            e.preventDefault();
            if (!that.hasContent) {
                return;
            }
            that.moveSelector(e.keyCode == 40);
            return;
        }
    });
    ccEvent(target, "keyup", function(e) {
        if (!that.serviceReady) return;
        if (e.keyCode == 27) {
            that.hide(true);
            that.loseFocus();
            that.resetSelector();
            return;
        }
        var noActionKeys = [ 37, 38, 39, 40 ];
        if (noActionKeys.indexOf(e.keyCode) != -1) {
            return;
        }
        if (e.keyCode == 13) {
            if (!that.hasContent || that.selectorPos < 0) {
                return;
            }
            var elem = that.searchObj.getElementsByTagName("LI")[that.selectorPos];
            if (that.sid == -1) {
                that.selectCountry(elem.getAttribute("countryCode"));
            } else {
                that.select(elem);
            }
            return;
        }
        if (that.sid == -1) {
            that.changeCountry(this.value);
        } else {
            that.activeFilters = {};
            that.lastSearch = this.value;
            var timeTrack = new Date().getTime() / 1e3;
            that.sid = timeTrack;
            var searchVal = this.value;
            setTimeout(function() {
                if (that.sidCheck(timeTrack)) {
                    if (searchVal !== "") {
                        that.search(searchVal, that.activeFilters, timeTrack);
                        that.cleanHistory();
                    } else {
                        that.clear();
                    }
                }
            }, 250);
            that.activeDom = that.domLib[domLibId];
            that.gfxModeTools.reposition(that, target);
        }
    });
    ccEvent(target, "focus", function() {
        that.onFocus(target);
    });
    ccEvent(target, "blur", function() {
        if (!that.serviceReady) return;
        that.focused = false;
        that.hide();
    });
    if (target === document.activeElement) {
        this.onFocus(target);
    }
};

clickToAddress.prototype.onFocus = function(target) {
    var that = this;
    if (!that.serviceReady) {
        setTimeout(function() {
            that.onFocus(target);
        }, 250);
        return;
    }
    var prestate = that.visible;
    that.gfxModeTools.reposition(that, target);
    that.activeInput = target;
    that.focused = true;
    that.show();
    if (target.value !== "" && !prestate) {
        that.search(target.value);
    }
};

clickToAddress.prototype.resetSelector = function() {
    this.hasContent = false;
    this.selectorPos = -1;
};

clickToAddress.prototype.moveSelector = function(goDown) {
    if (!this.visible) {
        return;
    }
    var elems = this.searchObj.getElementsByTagName("LI");
    if (goDown && this.selectorPos + 1 < elems.length) {
        this.selectorPos++;
    }
    if (!goDown && this.selectorPos - 1 >= 0) {
        this.selectorPos--;
    }
    for (var i = 0; i < elems.length; i++) {
        if (i != this.selectorPos) {
            elems[i].className = elems[i].className.replace(" active", "");
        } else {
            if (elems[i].className.indexOf("active") == -1) {
                elems[i].className = elems[i].className + " active";
            }
        }
    }
    var offset = 30 * (this.selectorPos + 1);
    var list = this.searchObj.getElementsByTagName("UL")[0];
    if (offset > list.offsetHeight + list.scrollTop) {
        list.scrollTop = offset - list.offsetHeight;
    }
    if (offset <= list.scrollTop) {
        list.scrollTop = offset - 30;
    }
};

clickToAddress.prototype.showGeo = function() {
    this.searchObj.getElementsByClassName("geo")[0].style.display = "block";
};

clickToAddress.prototype.hideKeyboard = function() {
    var that = this;
    that.keyboardHideInProgress = true;
    that.activeInput.setAttribute("readonly", "readonly");
    that.activeInput.setAttribute("disabled", "true");
    setTimeout(function() {
        that.activeInput.blur();
        that.activeInput.removeAttribute("readonly");
        that.activeInput.removeAttribute("disabled");
    }, 100);
};

clickToAddress.prototype.getStyleSheet = function() {
    if (this.cssPath === false) {
        return;
    }
    var cssId = "crafty_css";
    if (!document.getElementById(cssId)) {
        var head = document.getElementsByTagName("head")[0];
        var link = document.createElement("link");
        link.id = cssId;
        link.rel = "stylesheet";
        link.type = "text/css";
        link.href = this.cssPath;
        link.media = "all";
        head.appendChild(link);
    }
};

clickToAddress.prototype.setProgressBar = function(state) {
    var pgbar = this.searchObj.getElementsByClassName("progressBar")[0];
    switch (state) {
      case 0:
        pgbar.className = "progressBar action";
        pgbar.style.width = "50%";
        setTimeout(function() {
            if (pgbar.className == "progressBar action") {
                pgbar.className = "progressBar";
                pgbar.style.width = "0%";
            }
        }, 5e3);
        break;

      case 1:
        pgbar.className = "progressBar finish";
        pgbar.style.width = "100%";
        setTimeout(function() {
            pgbar.className = "progressBar";
            pgbar.style.width = "0%";
        }, 2e3);
        break;

      case 2:
        break;
    }
};